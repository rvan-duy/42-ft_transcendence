// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Access {
  PRIVATE
  PROTECTED
  PUBLIC
}

model UserTimestamp {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  userId    Int
  timestamp DateTime @default(now())
}

model User {
  id        Int     @default(autoincrement()) @id
  intraId   Int     @unique
  name      String  @unique
  status    String?
  friends   Int[] // ids
  blocked   Int[] // ids
  elo       Int     @default(500)
  rooms     Room[]
  admin     Room[]  @relation("admin")
  owns      Room[]  @relation("owns")
  sendMsg   Msg[]
  games     Game[]
  twoFactor Boolean @default(false)
  secret    String?
}

model Room {
  id          Int @default(autoincrement()) @id
  name        String?
  owner       User? @relation("owns", fields: [ownerId], references: [id])
  ownerId     Int?
  admin       User[] @relation("admin")
  users       User[]
  banned      UserTimestamp[]
  hashedCode  String?
  access      Access @default(PUBLIC)
  messages    Msg[]
  lastId      Int    @default(0)
}

model Msg {
  @@id([roomId, id])
  id        Int  // has to be set to last Id of Room + 1 and also increase the room->lastId by 1
  room      Room? @relation(fields: [roomId], references: [id])
  roomId    Int
  body      String
  author    User? @relation(fields: [authorId], references: [id])
  authorId  Int
  invite    Boolean // ? how ?
  timestamp DateTime @default(now())
}

model Game  {
  id        Int @default(autoincrement()) @id
  players   User[]
  score     Int[]
}
