// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Access {
  PRIVATE
  PROTECTED
  PUBLIC
}

enum Status {
  MUTED
  BANNED
}

model UserTimestamp {
  id        Int      @id @default(autoincrement())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  userId    Int
  timestamp DateTime @default(now())
  status    Status
}

model User {
  id      Int     @id @default(autoincrement())
  intraId Int     @unique
  name    String  @unique
  status  String?
  pending Int[] // ids
  friends Int[] // ids
  blocked Int[] // ids
  elo     Int     @default(500)
  rooms   Room[]
  admin   Room[]  @relation("admin")
  owns    Room[]  @relation("owns")
  sendMsg Msg[]
  games   Game[]
  twoFactor Boolean @default(false)
  secret    String?
}

model Room {
  id         Int             @id @default(autoincrement())
  name       String?
  owner      User?           @relation("owns", fields: [ownerId], references: [id])
  ownerId    Int?
  admin      User[]          @relation("admin")
  users      User[]
  banMute    UserTimestamp[]
  hashedCode String?
  access     Access          @default(PUBLIC)
  messages   Msg[]
  lastId     Int             @default(0)
}

model Msg {
  id        Int // has to be set to last Id of Room + 1 and also increase the room->lastId by 1
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    Int
  body      String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int
  invite    Boolean // ? how ?
  timestamp DateTime @default(now())

  @@id([roomId, id])
}

model Game {
  id      Int    @id @default(autoincrement())
  players User[]
  score   Int[]
  winnerId Int
}
